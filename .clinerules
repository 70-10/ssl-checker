# レポートについて

- これからやろうとしていることや、やったことについては、日本語で発言してください。

# 開発の進め方

- 一緒に開発を進めるため、足並みを揃えてコードの方針を共有しながらプログラミングしてください。
- できるだけ小さい単位で、私にコードレビューの依頼を行ってください。
  - 例：1ファイルの変更が完了した時点でレビューを依頼してください（プログラムがエラーで停止していても構いません）。
  - ただし、1ファイル内で修正可能な警告やエラーは、修正してください。

# 注意すべき点

- コードの読み込みには大きなコストがかかるため、効率的に作業を進める必要があります。
- 修正対象のファイルを探す場合は、直接ファイルを開くのではなく、コマンドを実行して検索してください。
  - 無意味なファイルを開くと、その分だけ余計なコストがかかります。

# 指示の受け方

- 指示に対して最高の結果を出してくれることは理解していますが、要求以上のものを提示されると、確認や理解に時間がかかります。
  - やりすぎた結果は破棄する必要があり、双方にとって望ましくありません。
- まずは、受けた指示の範囲内で作業してください。
  - 具体的には、ファイルの修正や機能の追加が指示されている場合、その範囲内で作業してください。
  - コード内でのコメント追加は問題ありませんが、指示されていない Readme の修正、サンプルコードの作成、ドキュメントの生成などは行わないでください。
  - そのような作業が必要な場合は、次に私にその旨を伝えてください。

# コーディングルール

## テスト

### 1. テスト構造
- describe/test形式で階層的に整理
- Arrange-Act-Assert パターンに従う
- テストスイートやテストケースのタイトルは英語で記述
- 「when」「if」「should」「given that」などの表現を使用して目的と期待値を明確化
- 理由：
  - テストの意図が明確
  - 保守が容易
  - 新規テストの追加が簡単

### 2. テストデータ
- テストごとに独立したデータを使用
- ヘルパー関数を活用してテストデータを生成
- 必要に応じてモックやスタブを使用して外部依存性を排除
- 理由：
  - テスト間の独立性確保
  - テストの再現性向上
  - コードの重複削減

### 3. テスト基準
- ビジネスロジックに対するユニットテストは必須
- APIエンドポイントに対する統合テストを実施
- 重要なユーザーフローに対するE2Eテストを実施
- コード変更前に必ずテストを追加・修正
- すべてのテストがパスしていることを確認してからコミット